[{"title":"爱上C","url":"/2022/10/05/%E7%88%B1%E4%B8%8AC/","content":"27.常量和指针\n\n\n代码\n&#96;&#96;&#96;\n\n\n\n\n指针可以修改为指向不同的常量\n指针也可以修改为指向不同的变量\n\n常量指针常量指针 \n指针本身不能改变 但是指向的值是可以改变的\n#include &lt;stdio.h&gt;int main()&#123;    int num = 520;    const int cnum = 880;    int * const p = &amp;num;        *p = 1024;    printf(&quot;*p:%d\\n&quot;,*p);       \t// p = &amp;cnum; //不可以被修改    //printf(&quot;*p:%d\\n&quot;,*p);    return 0;&#125;\n\n28.函数定义函数和函数调用打印函数的封装\n#include &lt;stdio.h&gt;//常见的打印图案函数调用void print_C();void print_C()&#123;    printf(&quot; ######  \\n&quot;);    printf(&quot;##    ## \\n&quot;);    printf(&quot;##       \\n&quot;);    printf(&quot;##       \\n&quot;);    printf(&quot;##    ## \\n&quot;);    printf(&quot; ######  \\n&quot;);&#125;int main()&#123;    print_C();    return 0;&#125;\n\n函数的定义类型名  函数名（参数列表）\n{\n​\t函数体\n}\n函数的声明\n声明就是告诉编译器我们要使用这个函数 \n声明(Declaration)\n\n函数的参数和返回值示例1：编写一个函数sum，由用户输入参数n，计算1+2+3+……….+(n-1)+n的结果并返回。\n#include &lt;stdio.h&gt;int sum(int n);int sum(int n)//n为形参&#123;    int result = 0;        do &#123;        result += n;            &#125;while(n-- &gt; 0);        return result;    &#125;int main()&#123;    int n,result;        printf(&quot;请输入n的值:&quot;);    scanf(&quot;%d&quot;,&amp;n);        result = sum(n);        printf(&quot;1+2+3+..........+(n-1)+n的结果是：%d\\n&quot;,result);&#125;\n\n示例2：编写一个函数Max，接收两个整型参数，并返回他们中较大的那个\n#include &lt;stdio.h&gt;int max(int,int);int max(int x,int y)&#123;\t    if(x&gt;y)            return x;    \telse            return y;&#125;int main()&#123;    int j,k;    printf(&quot;请输入两个整数：&quot;);    scanf(&quot;%d&quot;,&amp;j);//scanf(&quot;%d%d&quot;,&amp;j,&amp;k);    scanf(&quot;%d&quot;,&amp;k);    printf(&quot;较大的值为%d&quot;,max(j,k) );&#125;\n\n29.参数和指针","categories":["学习C语言"],"tags":["学习"]},{"title":"freeRTos","url":"/2022/09/07/freeRTos/","content":"RTOS\nRTOS全称为 Real Time Operation System，即实时操作系统。\nRTOS核心是任务调度，强调实时性。\n特点：更好的时间实时处理机制；更高效利用CPU资源；通用的任务管理框架。\n\nFreeRTOSfreeRTOS 移植配置文件\n**INCLUDE_**开头的宏表示使能或者除能对应的API函数\nINCLUDE_vTaskPrioritySet     表示使能函数vTaskPrioritySet() 设置优先级函数\n\n创建和删除任务创建任务结构体\nxReturn = xTaskCreate((TaskFunction_t )AppTaskCreate,  /* 任务入口函数 */                      (const char*    )&quot;AppTaskCreate&quot;,/* 任务名字 */                      (uint16_t       )512,  /* 任务栈大小 */                      (void*          )NULL,/* 任务入口函数参数 */                      (UBaseType_t    )1, /* 任务的优先级 */                      (TaskHandle_t*  )&amp;AppTaskCreate_Handle);/* 任务控制块指针 */ \n\n```# 挂起任务和恢复- vTaskSuspend()  \t挂起一个任务- vTaskResume()      恢复一个任务- xTaskResumeFromISR()      中断任务函数中恢复一个任务的运行- ​\t\t\t\t\n\n  \n\n# DMA直接存储器存取\n\n- 外设和存储器 存储器和存储器之间的高速数据传输 无需CPU干涉\n- 软件触发和特定的硬件触发\n\n","categories":[],"tags":[]},{"title":"诗歌","url":"/2022/09/05/%E8%AF%97%E6%AD%8C/","content":"《昆明大观楼长联·孙髯》原文五百里滇池， 奔来眼底。披襟岸帻， 喜茫茫空阔无边。看东骧神骏， 西翥灵仪， 北走蜿蜒，南翔缟素。高人韵士，何妨选胜登临。趁蟹屿螺洲，梳裹就风鬟雾鬓; 更蘋天苇地， 点缀些翠羽丹霞。莫孤负： 四围香稻， 万顷晴沙，九夏芙蓉，三春杨柳。\n数千年往事， 注到心头。把酒凌虚， 叹滚滚英雄谁在?想汉习楼船，唐标铁柱， 宋挥玉斧，元跨革囊。伟烈丰功， 费尽移山心力。尽珠帘画栋，卷不及暮雨朝云; 便断碣残碑，都付与苍烟落照。只赢得：几杵疏钟，半江渔火， 两行秋雁，一枕青霜。\n","categories":[],"tags":["鉴赏"]},{"title":"51单片机","url":"/2022/08/23/51%E5%8D%95%E7%89%87%E6%9C%BA/","content":"51单片机复习什么是单片机\n单片机 Micro Controller Unit 简称MCU\n内部集成了CPU RAM　ROM　定时器　中断系统　通讯接口　\n特点：成本低　体积小　结构简单　在工业控制用途广chauh创建\n\n使用C语言\n电阻表示小知识三位数\n\n102 &#x3D; 1k    10 00 &#x3D; 1k\n473   47*10^3   47 000 &#x3D; 47k\n\n四位数\n\n1001  &#x3D; 100 0   1k\n1002 &#x3D; 100 00   10k\n\n","categories":[],"tags":[]},{"title":"STM32","url":"/2022/08/23/STM32/","content":"STM32什么是STM32\n\n\nSTM32芯片内部可以粗略划分两部分：内核+片上外设。如果与电脑类比，内核与片上外设就如同电脑的CPU与主板、内存、显卡、硬盘的关系。\n\nARM公司只设计内核不生产芯片，他会将有关内核的技术授权给各半导体厂商，这些厂商都是基于这个内核自己设计片上外设如SRAM、ROM、FLASH、USART、GPIO等，然后集成到一个硅片上，这就是我们现在用的芯片。\n\nROM和RAM （半导体存储器）\n\nROM在系统停止供电的时候仍然可以保持数据\nRAM通常都是在掉电之后就丢失数据，典型的RAM就是计算机的内存。\nRAM分为静态RAM（Static RAM&#x2F;SRAM）和动态RAM（Dynamic RAM&#x2F;DRAM）\nSRAM速度非常快，常用于CPU的一级缓冲，二级缓冲\nDRAM保留数据的时间很短，速度也比SRAM慢，不过它还是比任何的ROM都要快，但从价格上来说DRAM相比SRAM要便宜很多，计算机内存就是DRAM的。\nDRAM分为很多种，这里介绍其中的一种DDR RAM\n\n\nGPIO (general purpose intput output )\n\n是通用输入输出端口的简称，可以通过软件来控制其输入和输出。STM32芯片的GPIO引脚与外部设备连接起来，从而实现与外部通讯、控制以及数据采集的功能。\n\nGPIO接口至少有两个寄存器，即“通用IO控制寄存器”与“通用IO数据寄存器”。\n\n可以配置8种输入输出模式\n\n引脚电平：0V-3.3V\n\n输出模式下可控制端口输出高低电平，用以驱动LED、控制蜂鸣器、模拟通信协议输出时序\n\n输入模式下可以读取端口的高低电平或电压，用于读取按键输入，外接模块电平信号输入，ADC电压采集，模拟通信协议接受数据等\n\n\n\n每个GPIO外设总共有16个引脚，编号是从0到15，PA0-PA15\n\n1代表高电平，0代表低电平，输入和读取同高低\n\n\n\n输入部分：VDD接３.３V　　Vｓｓ接０V　　两个二极管的主要作用是保护电路\n\n上拉输入模式：上面导通　下面断开　默认为高电平的输入模式\n下拉输入模式：下面导通　上面断开　默认为低电平的输入模式\n浮空输入模式：两个都断开\n\n上拉电阻和下拉电阻的阻值都很大，目的是尽量不影响正常的输入操作\n\n施密特触发器：对输入电压进行整形　如果输入电压大于某一阈值，输出就会瞬间升为高电平　如果输入电压小于某一阈值，输出就会瞬间降为低电平\n\nP-MOS  N-MOS　是一种导通开关\n\n推挽模式输出：　两种均有效\n\n强推挽输出模式：数据寄存器为１时，上管导通，下管断开，输出直接到VDD，输出高电平　\n\n开漏模式输出：数据寄存器为０时，上管断开，下管导通，输出直接到VSS，输出低电平\n\n开漏模式可以作为通信协议的驱动方式，比如IIC通信的引脚，就是使用的开漏模式。在多机通信的情况下，该模式还可以避免各个设备的相互干扰。开漏模式还可以用于5V的电平信号\n\n输入\n\n\n\n\n\n\n开发方式\n\n\n\n基于标准库（库函数的方式）\n基于HAL库的方式（图形化界面）\n基于寄存器方式\n\n串口通信串口协议通信接口\n串口时最简单的通信协议，相比于IIC和SPI\n\n通信的目的：将一个设备的数据传送到另一个设备，扩展硬件一同\n\n通信协议：制定通信的规则，通信双方按照协议规则进行数据收发\n\n\n\n同步通信靠时钟线，异步通信靠比特率\n\n使用差分信号可以极大的提高抗干扰特性，差分信号传送速度和距离都很高\n\n串口通信一般都是点对点，两个设备的互相通信\n\n\n\n电平标准：数据1和数据0的表达方式，人为规定的电压与数据的对应关系\n\nTTL电平：+3.3V或+5V表示１　　　０V表示０\nRS232电平：-3V到-15V表示1        +3V到+15V表示0\nRS485电平：两线电压差+2到+6V表示1     -2到-6V表示0（差分信号）\n\n\n波特率：串口通信的速率 （每隔多久发送一位数据）\n\n起始位：标志一个数据帧的开始，固定为低电平\n\n数据位：数据帧的有效载荷，1为高电平，0为低电平，低位先行从右往左取数\n就是例如： 01000101  第一位就是1\n01000100 第一位就是 0\n\n校验位：用于数据验证，根据数据位计算得来\n\n奇校验和偶校验（只能保证一定程度上的数据校验）\n奇校验：补一位要求1的总数为奇数\n偶校验：补一位要求1的总数为偶数\nCRC校验：\n\n\n停止位：用于数据帧间隔，固定为高电平\n\n\n\n\nUSART外设通用同步&#x2F;异步收发器\n\n一般选用停止位长度为1\n中断系统\n中断：在主程序运行过程中，出现了特定的中断触发条件（中断源），使得CPU暂停当前正在运行的程序，转而去处理中断程序，处理完成后又返回原来被暂停的位置继续运行。\n使用中断系统能够 极大的提高程序的效率\n中断优先级：当有多个中断源同时申请中断时，CPU会根据中断源的轻重缓急进行裁决，优先响应更加紧急的中断源\n中断嵌套：当中断程序正在运行时，又有新的更高优先级的中断资源申请中断，CPU再次暂停当前中断程序，转而去处理新的中断程序，处理完成后依次进行返回。\n\nSTM32中断：\n\nSTM32库函数1.void USART_DeInit(USART_TypeDef* USARTx)\n功能：将USART寄存器重置为默认值\n注释：主要是调用了RCC_APBxPeriphResetCmd函数对寄存器进行复位\n例如：USART_DeInit(USART1);\n2.void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)功能：根据结构体的参数配置来对USARTx外设进行初始化\n注释：流控制可以控制数据传输的进程，解决接收端数据缓冲区已满，再传输则数据丢失的问题\n例如：USART_Init(USART1,&amp;USART_InitStructure);\nvoid USART_StructInit(USART_InitTypeDef* USART_InitStruct)功能：将USART_InitStructure结构体变量成员按默认值填充\n注释：只是填充数据，没有Init的操作部分，没有涉及寄存器写入的操作\n例如：USART_StructInit(&amp;USART_InitStructure);\n\nvoid USART_ClockInit              void USART_ClockStructInit\n功能：配置同步时钟输出 包括时钟是不是要输出，时钟的极性相位等参数 也是用结构体方式配置\nvoid USART_Cmd\n功能：使能或者失能USART外设 例如：USART_Cmd(USART1 , ENABLE);\nvoid USART_ITConfig\n功能：配置指定的USART中断    例如：****USART_ITConfig(USART1 , USART_IT_RXNE , ENABLE);\nvoid USART_DMACmd\n功能：可以开启USART到DMA的触法通道\nvoid USART_SendData\n功能：SendData 发送数据  Tx\nuint16_t USART_ReceiveData\n功能：ReceiceData 接收数据\n\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);//USART1的TX是PA9   RX是PA10  开启USART1的时钟RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);//开启GPIO时钟\n\nRCC初始化：这里我们使用HSE(外部时钟），正常使用的时候也都是使用外部时钟\n使用HSE时钟，程序设置时钟参数流程：1、将RCC寄存器重新设置为默认值   RCC_DeInit;2、打开外部高速时钟晶振HSE       RCC_HSEConfig(RCC_HSE_ON);3、等待外部高速时钟晶振工作      HSEStartUpStatus &#x3D; RCC_WaitForHSEStartUp();4、设置AHB时钟         RCC_HCLKConfig;5、设置高速AHB时钟     RCC_PCLK2Config;6、设置低速速AHB时钟   RCC_PCLK1Config;7、设置PLL              RCC_PLLConfig;8、打开PLL              RCC_PLLCmd(ENABLE);9、等待PLL工作          while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) &#x3D;&#x3D; RESET)10、设置系统时钟        RCC_SYSCLKConfig;11、判断是否PLL是系统时钟     while(RCC_GetSYSCLKSource() !&#x3D; 0x08)12、打开要使用的外设时钟      RCC_APB2PeriphClockCmd()&#x2F;RCC_APB1PeriphClockCmd()\n\n代码实现：对RCC的配置函数(使用外部8MHz晶振) \n系统时钟72MHz，APH 72MHz，APB2 72MHz，APB1 32MHz，USB 48MHz TIMCLK&#x3D;72M\nvoid RCC_Configuration(void)&#123;\t//----------使用外部RC晶振-----------\tRCC_DeInit();\t\t\t//初始化为缺省值\tRCC_HSEConfig(RCC_HSE_ON);\t//使能外部的高速时钟 \twhile(RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);\t\t//等待外部高速时钟使能就绪\t\tFLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);\t\t//Enable Prefetch Buffer\tFLASH_SetLatency(FLASH_Latency_2);\t\t\t//Flash 2 wait state\t\tRCC_HCLKConfig(RCC_SYSCLK_Div1);\t\t\t//HCLK = SYSCLK\tRCC_PCLK2Config(RCC_HCLK_Div1);\t\t\t\t//PCLK2 =  HCLK\tRCC_PCLK1Config(RCC_HCLK_Div2);\t\t\t\t//PCLK1 = HCLK/2\tRCC_PLLConfig(RCC_PLLSource_HSE_Div1,RCC_PLLMul_9);\t\t//PLLCLK = 8MHZ * 9 =72MHZ\tRCC_PLLCmd(ENABLE);\t\t\t\t//Enable PLLCLK \twhile(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);\t\t//Wait till PLLCLK is ready    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);\t    //Select PLL as system clock\twhile(RCC_GetSYSCLKSource()!=0x08);\t\t\t//Wait till PLL is used as system clock source\t\t//---------打开相应外设时钟--------------------\tRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);\t//使能APB2外设的GPIOA的时钟\t\t &#125;\n\nGPIO初始化\n   GPIO_InitTypeDef GPIO_InitStructure;//申明一个结构体，名字GPIO_InitStructure GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;//设置输出模式GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;//设定要操作的管脚位GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//IO口速度为50MHZGPIO_Init(GPIOA, &amp;GPIO_InitStructure);//根据设定参数配置GPIO\n\nGPIO的工作模式主要有八种：4种输入方式，4种输出方式，分别为输入浮空，输入上拉，输入下拉，模拟输入；输出方式为开漏输出，开漏复用输出，推挽输出，推挽复用输出。（1）GPIO_Mode_AIN 模拟输入 （应用ADC模拟输入，或者低功耗下省电）（2）GPIO_Mode_IN_FLOATING 浮空输入 （浮空就是浮在半空，可以被其他物体拉上或者拉下，可以用于按键输入）（3）GPIO_Mode_IPD 下拉输入 （IO内部下拉电阻输入）（4）GPIO_Mode_IPU 上拉输入 （IO内部上拉电阻输入）（5）GPIO_Mode_Out_OD 开漏输出（开漏输出:输出端相当于三极管的集电极. 要得到高电平状态需要上拉电阻才行）（6）GPIO_Mode_Out_PP 推挽输出 （推挽就是有推有拉电平都是确定的，不需要上拉和下拉，IO输出0-接GND， IO输出1 -接VCC，读输入值是未知的 ）（7）GPIO_Mode_AF_OD 复用开漏输出（片内外设功能（I2C的SCL,SDA））（8）GPIO_Mode_AF_PP 复用推挽输出 （片内外设功能（TX1,MOSI,MISO.SCK.SS））————————————————配置USART\nUSART_InitTypeDef USART_InitStruture;//结构体参数初始化USART_InitStruture.USART_BaudRate = 9600;//波特率USART_InitStruture.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//硬件流控制USART_InitStruture.USART_Mode = USART_Mode_Tx;//发送模式Tx和接收模式RxUSART_InitStruture.USART_Parity = USART_Parity_No;//校验位 无校验No 奇校验Odd 偶校验EvenUSART_InitStruture.USART_StopBits = USART_StopBits_1;//停止位  0.5  1  1.5  2USART_InitStruture.USART_WordLength = USART_WordLength_8b;//字长 8位或者9位 有无校验 8b 9bUSART_Init(USART1,&amp;USART_InitStruture);\n\n","categories":["STM32"],"tags":["学习"]},{"title":"电脑学习进阶","url":"/2022/08/14/%E7%94%B5%E8%84%91%E5%AD%A6%E4%B9%A0%E8%BF%9B%E9%98%B6/","content":"电脑学习问题\n1.cpu的相关知识2.计算机网络 七层网络框架 手机通讯之类的3.常用的计算机软件4.如何高效的使用搜索引擎5.程序语言的发展6.网站的运作 如何创建一个网站7.计算机如何存储数据和调用数据8.操作系统的分类9.常见的操作系统又有什么联系10.简单的人工智能是什么原理\n","categories":["计算机学习"],"tags":["学习"]},{"title":"电脑学习","url":"/2022/08/07/%E7%94%B5%E8%84%91%E5%AD%A6%E4%B9%A0/","content":"什么是计算机计算机的发展历史计算机的起源劳动实践中发明的计算工具\n原始社会：结绳\n春秋战国：算筹\n唐代末：算盘\n\n十七世纪以来出现的计算工具\n1622年英国数学家奥特瑞德：计算尺\n1642年法国物理学家帕斯卡：齿轮式加减法器\n1673年德国数学家莱布尼茨：能进行四则运算的机械计算机\n\n近代计算机发展\n1822年英国数学家查尔斯巴贝奇：差分机\n1834年英国数学家查尔斯巴贝奇：分析机\n1944年美国科学家霍德华艾肯：提出机电方法来实现巴贝分析机，制造出*Mark I计算机\n\n电子计算机的问世\n艾兰图灵（英语：Alan Mathison Turing，1912年6月23日－1954年6月7日）\n主要贡献：建立了图灵机(TM)的理论模型，对数字计算机的一般结构，可实现性和局限性产生了很大的影响。\n图灵测试：定义机器人是否为人(人工智能的测试)，奠定了人工智能的理论基础。\n\n\n电影《模仿游戏》影片改编自安德鲁·霍奇斯编著的传记《艾伦·图灵传》，讲述了“计算机科学之父”艾伦·图灵的传奇人生，故事主要聚焦于图灵协助盟军破译德国密码系统“英格玛”，从而扭转二战战局的经历。\n\n冯诺依曼（John von Neumann，1903年12月28日-1957年2月8日）\n\n主要贡献：首先提出了在计算机内存储程序的概念，使用单一处理不见来完成计算，存储及通信工作，使用具有存储程序的计算机成为现代计算机的重要标志。（程序存储体系结构）\n\n计算机发展的“第一”\n第一台电子计算机：埃尼亚克(ENIAC)。1946年2月14日诞生在美国。\nENIAC长30.48米，宽6米，高2.4米，占地面积约170平方米，30个操作台，重达30英吨，耗电量150千瓦，造价48万美元。它包含了17,468根真空管（电子管）7,200根水晶二极管，1,500 个中转，70,000个电阻器，10,000个电容器，1500个继电器，6000多个开关，计算速度是每秒5000次加法或400次乘法，是使用继电器运转的机电式计算机的1000倍、手工计算的20万倍。\n优点：计算速度一流\n缺点：不能存储程序，使用十进制数等\n第一台存储程序式计算机：EDVAC(离散变量自动电子计算机)\n\n电子计算机的发展阶段\n第1代：电子管数字机（1946—1958年）\n硬件方面，逻辑元件采用的是真空电子管，主存储器采用汞延迟线、阴极射线示波管静电存储器、磁鼓、磁芯；外存储器采用的是磁带。软件方面采用的是机器语言、汇编语言。应用领域以军事和科学计算为主。\n缺点是体积大、功耗高、可靠性差。速度慢（一般为每秒数千次至数万次）、价格昂贵，但为以后的计算机发展奠定了基础。\n\n第2代：晶体管数字机（1958—1964年）\n软件方面的操作系统、高级语言及其编译程序应用领域以科学计算和事务处理为主，并开始进入工业控制领域。特点是体积缩小、能耗降低、可靠性提高、运算速度提高（一般为每秒数10万次，可高达300万次）、性能比第1代计算机有很大的提高。\n\n第3代：集成电路数字机（1964—1970年）\n硬件方面，逻辑元件采用中、小规模集成电路（MSI、SSI），主存储器仍采用磁芯。软件方面出现了分时操作系统以及结构化、规模化程序设计方法。特点是速度更快（一般为每秒数百万次至数千万次），而且可靠性有了显著提高，价格进一步下降，产品走向了通用化、系列化和标准化等。应用领域开始进入文字处理和图形图像处理领域。\n\n第4代：大规模集成电路计算机（1970年至今）\n硬件方面，逻辑元件采用大规模和超大规模集成电路（LSI和VLSI）。软件方面出现了数据库管理系统、网络管理系统和面向对象语言等。1971年世界上第一台微处理器在美国硅谷诞生，开创了微型计算机的新时代。应用领域从科学计算、事务管理、过程控制逐步走向家庭。\n\n\n计算机系统之硬件系统计算机的组成\n计算机组成指的是系统结构的逻辑实现，包括机器机内的数据流和控制流的组成及逻辑设计等。 主要分为五个部分：控制器，运算器，存储器，输入设备，输出设备\n\n\n\n认识常见的计算机硬件\n硬件系统细化分主要包括以下部件：\n电源：电源是电脑中不可缺少的供电设备，它的作用是将220V交流转换为电脑中使用的5V，12V，3.3V直流电，其性能的好坏，直接影响到其他设备工作的稳定性，进而会影响整机的稳定性。      主板：主板是电脑中各个部件工作的一个平台，它把电脑的各个部件紧密连接在一起，各个部件通过主板进行数据传输。也就是说，电脑中重要的“交通枢纽”都在主板上，它工作的稳定性影响着整机工作的稳定性。      CPU:CPU(Central Precessing Unit)即中央处理器，其功能是执行算，逻辑运算，数据处理，传四舍五入 ，输入&#x2F;输出的控制电脑自动，协调地完成各种操作。作为整个系统的核心，CPU 也是整个系统最高的执行单元，因此CPU已成为决定电脑性能的核心部件，很多用户都以它为标准来判断电脑的档次。     内存：内存又叫内部存储器（RAM），属于电子式存储设备，它由电路板和芯片组成，特点是体积小，速度快，有电可存，无电清空，即电脑在开机状态时内存中可存储数据，关机后将自动清空其中的所有数据。     硬盘：硬盘属于外部存储器，由金属磁片制成，而磁片有记功能，所以储到磁片上的数据，不论在开机，还是并机，都不会丢失。     声卡：声卡是组成多媒体电脑必不可少的一个硬件设备，其作用是当发出播放命令后，声卡将电脑中的声音数字信号转换成模拟信号送到音箱上发出声音。     显卡：显卡在工作时与显示器配合输出图形，文字，其作用是负责将CPU送来的数字信号转换成显示器识别的模拟信号，传送到显示器上显示出来。     调制解调器：调制解调器是通过电话线上网时必不可少的设备之一。它的作用是将电脑上处理的数字信号转换成电话线传输的模拟信号。     网卡：网卡的作用是充当电脑与网线之间的桥梁，它是用来建立局网的重要设备之一。     软驱：软驱用来读取软盘中的数据。软盘为可读写外部存储设备。     光驱：光驱是用来读取光盘中的设备。光盘为只读外部存储设备，其容量为650MB左右。     显示器：显示器有大有小，有薄有厚，品种多样，其作用是把电脑处理完的结果显示出来。它是一个输出设备，是电脑必不可缺少的部件之一。     键盘：键盘是主要的输入设备，用于把文字，数字等输到电脑上。     鼠标：当人们移到鼠标时，电脑屏幕上就会有一个箭头指针跟着移动，并可以很准确切指到想指的们位置，快速地在屏幕上定位，它是人们使用电脑不可缺少的部件之一。    音箱：通过它可以把电脑中的声音播放出来。    打印机：通过它可以把电脑中的文件打印到纸上，它是重要的输出设备之一。    摄像头、扫描仪、数码像机等设备。\n\n\n认识BIOS\nBIOS是个人电脑启动时加载的第一个软件。其实，它是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从CMOS中读写系统设置的具体信息。\n什么是 BIOS，BIOS 有什么用？ - 知乎 (zhihu.com)\n\n\n计算机系统之软件系统软件概述\n计算机软件的概念\n计算机软件是与计算机系统操作有关的计算机程序、规程、规则，以及可能有的文件、文档及数据。软件是用户与硬件之间的接口界面。用户主要通过软件与计算机进行交流。软件是计算机系统设计的重要依据。为了方便用户，为了使计算机系统具有较高的总体效用，在设计计算机系统时，必须通盘考虑软件与硬件的结合，以及用户的要求和软件的要求。\n\n\n系统软件\n系统软件是负责管理计算机系统中各种独立的硬件，使得它们可以协调工作。系统软件使得计算机使用者和其他软件将计算机当作一个整体而不需要顾及到底层每个硬件是如何工作的。\n一般来讲，系统软件包括操作系统和一系列基本的工具（比如编译器，数据库管理，存储器格式化，文件系统管理，用户身份验证，驱动管理，网络连接等方面的工具）。\n具体包括以下四类：\n各种服务性程序，如诊断程序、排错程序、练习程序等；\n语言程序，如汇编程序、编译程序、解释程序；\n操作系统；\n数据库管理系统；\n\n\n\n应用软件\n应用软件是为了某种特定的用途而被开发的软件。它可以是一个特定的程序，比如一个图像浏览器。也可以是一组功能联系紧密，可以互相协作的程序的集合，比如微软的Office软件。也可以是一个由众多独立程序组成的庞大的软件系统，比如数据库管理系统。\n\n常用的输入法教学键盘布局\n键盘常见键位的功能\nEsc键 ，取消键，看视频时可以退出全屏\nF1-F12 功能键，不同型号的电脑各按键功能不同。\n**Fn(Function 功能)**：用于和其他功能按键组成组合键以便实现控制作用，如：Fn+F1。不过有些电脑的Fn是功能锁定键，就是说不按这个键时直接按F1-F12是可以实现各个功能的，但是按了这个键之后F1-F12就不能用了。\nPrtSc&#x2F;PrtScr：截屏键&#x2F;屏幕硬拷贝键，按键后，调用”Photoshop”或其他绘图程序（一般电脑有自带的“画图”），选择粘贴，即可显示出抓取的画面来。在打印机已联机的情况下，按下该键可以将计算机屏幕的显示内容通过打印机输出。\nPause Break：暂停键，能使得计算机正在执行的命令或应用程序暂时停止工作，直到按键盘上任意一个键则继续。\n各种特殊符号：有些按键上有两个字符，直接按是下面的字符，按着shift键再按该键是上面的字符（注意：中英文状态下符号有差别）。\nBack Space：退格键，删除光标前面的字符在“我的电脑”或“Windows资源管理器”中查看上一级的文件夹。\nTab：制表键&#x2F;跳格键，用来绘制无边框的表格(txt中)&#x2F;在excel中跳至下一个单元格。\nCaps Lock：字母大小写转换键，对应指示灯。默认小写字母，按一下这个键，对应的指示灯就亮了（我键盘上这个键对应的指示灯就在这个键的右上角），即切换成了大写字母输入。\nShift：切换键，切换中英文。可搭配其他键组成快捷键（如:Ctrl+Shift 切换输入法）在”Windows资源管理器”或”我的电脑”中，选中第一个文件夹，按住SHIFT键，点击最后一个文件夹，就可以选种这之间所有的文件夹。\nCtrl：控制键，可搭配其他键组成快捷键（eg:Ctrl+Delete 永久删除所选项，而不将该项放入回收站）。在”Windows资源管理器”或”我的电脑”中,按住Ctrl键，点击文件夹，就可以选中多个不连续的文件夹。\nWin&#x2F;Windows键（窗户小图标）：单独按Windows显示或隐藏 “开始”功能表，搭配其他键组成快捷键。\nAlt：交替换档键&#x2F;更改键&#x2F;替换键，大多数情况下与其它键组合使用。\nEnter：回车键，换行的作用。实际运用上有确认的意思，比如登录QQ、微信或网页账号时，输入账户名和密码后按回车，就相当于点击登录按钮了。（关于“回车键”的来历，还得从机械英文打字机说起。在机械英文打字机上，有一个部件叫“字车”，每打一个字符，“字车”就前进一格。当打满一行字符后，打字者就得推动“字车”到起始位置，这时打字机会有两个动作响应：一是“字车”被归位，二是滚筒上卷一行，以便开始输入下一行，这个推动“字车”的动作叫“回车”。后来，在电动英文打字机上，人们增加了一个直接起“回车”作用的键。这个新增的键就被称为“回车键”。）\ninsert键：用来切换输入模式，即允许&#x2F;不允许改写的开关输入模式有2种：插入(默认),即输入的字符被插入到光标位置、覆盖:覆盖掉光标以后的内容。比如在Word中你输入1234,然后在1后边输入67，结果就是167234，当你按下insert键后,你在1后输入67,则23被修改了,最后变成1674。\ndelete键：删除键，删除光标后面的字符。\nHome：行首键。在word中按一次该键，光标会移至当前行的开头位置。(部分电脑当琐定数字键盘后，才会起Home的作用，否则代表“7，以下同此。由于我的键盘上这个键和控制方向的左键合在一起了，所以需要按着Fn的同时按Home键才可以，以下同此)\nEnd：行尾键。按一次该键，光标会移至当前行的末尾。\nPgUp&#x2F;PageUp：向上翻页键。用于浏览当前屏幕显示的上一页内容（word和网页中均有作用）。\nPgDn&#x2F;PageDown：向下翻页键。用于浏览当前屏幕显示的下一页内容（word和网页中均有作用）。\n← ↑ → ↓：光标移动键，使光标分别向左、向上、向右、向下移动一格。\n状态指示区，是显示对应锁定键(***Lock)的状态的。如NumLocK键(number lock)，是用来锁定数字小键盘的，锁定后才可以使用数字键区输入字符。\n\n如何正确的学习打字\n打字练习 - 在线打字练习（dazi.91xjr.com）\n\n勤于练习，多多记忆，熟能生巧\n\n常用软件的应用系统应用\n如何正确的安装和卸载软件：\n打开电脑左下角搜索键搜索控制面板\n打开控制面板后选择程序和功能\n浏览所安装的程序鼠标右键选择卸载即可完成\n\n\n\n应用软件\n如何创建压缩包和解压：\n\n\n常用的压缩软件有很多：1 1、 WinZip|压缩软件格局开创者的古典之美 2 2、 Winrar|永远免费的收费软件 3 3、 7-z|开源免费的最强压缩算法 4 4、 Bandizip|来自韩国的优秀免费压缩软件 5 5、 WinMount|新概念的解压缩软件 2018年7月13日\n如何创建压缩包举例(7z):\n首先右键选中需要压缩的文件夹\n选择7-zip 添加到压缩包\n点击确认后即可生成后缀为7z的压缩文件\n\n\n\n\n如何解压文件：\n\n\n选择要解压的压缩包 右键选择7-zip\n然后选择提取文件 选择要解压到的位置 确认即可\n\n\n办公软件教程：\n\n什么是office：\nOffice办公软件是由微软公司开发的办公软件套装，有Microsoft Windows、Windows Phone、Mac系列、iOS和Android等不同系统的版本。\n\noffice和wps有什么不同：\n1、价格。Microsoft Office是收费的，在国内淘宝，京东都可以购买，价格不同版本都有差异。wps则是免费的。\n2、功能性。OFFICE 功能强大些，WPS出品以来一直都是基于“模仿”微软office功能架构，几乎所有office的功能在wps office里面都是一样的操作。\n3、使用习惯。WPS设计是专门为中国人专门开发的软件。所以wps使用起来更加符合中国人的使用习惯，其中WPS 表格就自带了各种实用公式 ，为不懂公式的小白用户提供了很多便利。同时wps软件提供了很多时候中国人使用习惯的在线模板下载，同时可以将模板一键分享到论坛、微博。无论是节假日还是热点事件，模板库都会“与时俱进”随时更新，这也是wps独特之处之一。\n4、通用性。虽然WPS符合国人的习惯，也具备有众多独特的功能，但是相对于国际来说。使用的文档如果是WPS格式其他软件是没有办法打开的。而Microsoft Office通用性很强。\n5、用户体验。Microsoft Office在文档转换方面明显没有wps人性化，WPS新几年有推出pdf转word等一系列文档互转功能。Microsoft Office则显得比较滞后。\n总结：wps的功能和微软的office几乎相同，后者功能更多，前者上手更快\n\n教程：\n\n【Office 2019教程】word全套新手自学教程，从零基础到精通_哔哩哔哩_bilibili\n【WPS教程WPS课程】拜托三连了！全B站最用心（没有之一）的WPS免费课程！OFFICE&#x2F;WPS&#x2F;表格&#x2F;演示&#x2F;EXCEL函数&#x2F;Word排版&#x2F;PPT&#x2F;办公软件_哔哩哔哩_bilibili\n\n\n\n\n\n","categories":["计算机学习"],"tags":["学习"]},{"title":"行测判断","url":"/2022/07/22/%E8%A1%8C%E6%B5%8B%E5%88%A4%E6%96%AD/","content":"图形变换平移变换\n连续图形通过顺逆时针找规律\n\n将多个元素分开找规律\n\n十二宫格类的题型时，考虑走“回”字\n\n\n旋转变换\n每次变换多少度 分类比较\n画图实践\n\n翻转变换\n左右翻转：竖轴对称\n上下翻转：横轴对称\n中心对称\n\n样式规律\n样式类别特征：元素组成相似(线条重复出现)\n\n考点：\n\n加减同异：\n\n黑白运算\n\n\n\n\n","categories":["行测判断"],"tags":["学习"]},{"title":"计算机组成原理1","url":"/2022/07/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%861/","content":"导图\n硬件利用高低电平传递电信号给计算机\n通过多条电路，可以传递多个二进制数位，每个二进制数位称为1bit(比特)\n\n计算机系统的概述\n\n计算机系统&#x3D;硬件+软件\n\n\n\n第一台电子数字计算机：ENIAC(1946)冯诺依曼  逻辑元件：电子管 (1.8W个)\n\n1947年，贝尔实验室发明了晶体管\n\n\n\n逻辑元件：用来处理电信号最小的逻辑单元\n\n摩尔定律：集成电路上可容纳的晶体管数目，约每隔18个月便会增加一倍，整体性能也将提升一倍。(揭示了信息技术进步的速度)\n\n\n\n\n机器字长：计算机一次整数运算所能处理的二进制位 常见的有 8、16、32、64位\n\n计算机硬件的基本组成\n\n\n早期冯诺依曼机：ENIAC（需要手动接线来控制计算）\n\n“存储程序”：将指令以二进制代码的形式先输入计算机的主存储器（内存） 然后依次执行，到程序结束。\n\n在计算机系统中，软件和硬件在逻辑上是等效的\n\n冯诺依曼结构是以运算器为中心\n\n\n 缺点：运算器效率低下 处理能力低\n\n现代计算机结构\n\n\n\n\nCPU&#x3D;运算器+控制器\n认识各个硬件部件\n主存储器的基本组成\n\n\n存储体\nMAR(存储地址寄存器)\nMDR(存储数据寄存器)\n\n\n\n一个字节（Byte）&#x3D;8bit\n1B&#x3D;1个字节  1b&#x3D;1个bit\n1个字（word)&#x3D;(MDR)bit\n\n\n运算器的基本组成\n\n运算器进行一次整数加法运算所能处理的二进制数据的位数就称为运算器的字长\n控制器的基本组成\nCU:控制单元\n\n\n","categories":["计组"],"tags":["学习"]},{"title":"创建自己的博客（从零开始）","url":"/2022/07/14/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","content":"HEXO博客基于Github开源使用hexo+github免费搭建个人博客网站超详细教程_wapchief的博客-CSDN博客_hexo\n别人的教程\n几点注意事项 \n\n图片加载要用相对路径 在Typora中表现为如下\n\n三步曲 https://muyeyueyue.github.io/2022/07/13/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/\n\n\n","categories":["经验"],"tags":["学习"]},{"title":"分类测试","url":"/2022/07/14/%E5%88%86%E7%B1%BB%E6%B5%8B%E8%AF%95/","content":"\ntitle: 计算机组成原理1date: 2022-07-15 10:26:59categories: “计组”tags: “”学习”\n","categories":["日常学习"],"tags":["测试"]},{"title":"测试图片","url":"/2022/07/14/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/","content":"Why?\n打不开吗？\n*还是看不见\n","categories":[],"tags":["测试"]},{"title":"第二篇博客","url":"/2022/07/13/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/","content":"Idear\n图片太大 加载不出来 能否换小一点的试试\nhexo 三部曲\nhexo clean \n&#x2F;&#x2F;清除缓存文件 db.json 和已生成的静态文件 public 。网站显示异常时可以执行这条命令试试。\nhexo g\n&#x2F;&#x2F;生成网站静态文件到默认设置的 public 文件夹。\n\n便于查看网站生成的静态文件或者手动部署网站；\n如果使用自动部署，不需要先执行该命令；\nhexo g 是 hexo generate 的缩写，命令效果一致。\n\nhexo d \n&#x2F;&#x2F;自动生成网站静态文件hexo d 是 hexo deploy 的缩写，命令效果一致。\n\n","categories":[],"tags":["学习"]},{"title":"测试文章","url":"/2022/07/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","content":"picture\n图片测试\n为什么会打不开图片呢\n？？？\n待解决的问题+1\n\n","categories":[],"tags":["测试"]},{"title":"我的第一篇博客","url":"/2022/07/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","content":"Hello World\n自己从无到有的hexo网站搭建 纯纯的免费\n\nGithub真的是好东西\n网站目前是这样的 我也会慢慢优化的 加油\n一起进步一起学习\nmuyeyueyue\n编辑软件是Typora \n目前是白嫖 后面估计会补票\n白嫖链接typora下载和破解（仅供学习） - hackettt - 博客园 (cnblogs.com)\n完美结束\nmarkdown使用方法\n使用简单的标记语法 \n\n\n\n一级标题\n#一级标题\n\n\n\n二级标题\n##二级标题\n\n\n新建表格\nctrl+T\n\n\n区块元素\n\n这是一个区块的内容\n\n这是一个区块中的区块  \n\n\n\n\n\n区块元素\n&gt;这是一个区块的内容\n\n\n\n跳出区块\n按两下回车键\n\n\n强调元素\n强调的内容\n强调的内容\n加粗的内容\n加粗的内容\n\n\n\n倾斜\n*  *\n_ _\n\n\n\n加粗\n**   **\n__   __\n\n\n分割线\n\n\n\n\n\n分割线\n***\n—\n___\n\n\n\n代码\n#include&lt;stdio.h&gt;int main()&#123;    printf(&quot;This is a C program.\\n&quot;);    return 0;&#125;\n\n\n\n\n代码\n&#96;&#96;&#96;\n\n\n\n注意：分割元素之间不能出现内容字符，但是可以出现空格\n超链接元素\n行内式\n百度\n[百度](http://www.baidu.com)\n\n参考式\nEXIT外部中断\nEXIT外部中断 \n中断：在主程序执行过程中，出现了特定的中断触发条件（中断源），使得CUP暂停当前正在运行的程序，转而去处理中断程序，处理完成后有返回原来被 暂停的位置继续运行\n中断优先级：当有多个中断\n\nEXIT可以监测指定GPIO口的电平信号，当其指定的GPIO口产生电平变化时，EXIT将立即向NVIC发出中断申请，经过NVIC裁决后即可中断CPU主程序，使CPU执行EXIT对应的中断程序\n\n\n\nTIM定时器(Timer)C语言基础\n面向过程编程语言，性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、 Linux&#x2F;Unix等一般采用面向过程开发，性能是最重要的因素。\n编译性语言，效率高，灵活性高，可移植性高。\n第一个程序\n\n#include &lt;stdio.h&gt;int main()&#123;    printf(&quot;Hello World\\n&quot;);    return 0;  &#125;\n\n\n打印——-输出\nprintf 格式化输出函数  打印文本到屏幕上\n什么是变量？\n确定目标和储存的空间  \n变量名：变量名只能是英文字母和数字或者下划线组成，第一个必须是字母或者下划线开头，变量名区分大小写，不能使用关键字符。\n声明变量的类型，int ,char,float,double \n变量和常量 \n定义符号常量\n\n#define URL &quot;https://muyeyueyue.github.io/&quot;#define NAME &quot;muyeyue&quot;//宏定义\n\n\n字符串常量\n字符 ‘F’   ‘D’   ‘A’   ‘B’\n字符串 “Hello  World!”   在每一个字符串后编译器会自动加上一个”\\0”表示字符串结束  特殊的转义字符\n数据类型：整数类型int，浮点数类型float double，字符类型char，布尔类型_Bool 用于判断真或者假，枚举类型\n数组类型，结构类型，联合类型\nsizeof运算符：用于获得数据类型或表达式的长度\n\n#include &lt;stdio.h&gt;//数据类型所占长度int main()&#123;    printf(&quot;int = %d\\n&quot;,sizeof(int));    printf(&quot;short int = %d\\n&quot;,sizeof(short));    printf(&quot;_Bool =%d\\n&quot;,sizeof(_Bool));    return 0;    &#125;\n\n\nsigned 带符号位的整型和unsigned 不带   \n\nsigned第一位是符号位 0是正数 1是负数 \n\n补码\n\n7变-7 的方法 \n\n#include &lt;stdio.h&gt;#include &lt;math.h&gt;// singned 与 unsigned 正负数区别int main()&#123;    unsigned int result = pow(2,32)- 1;    printf(&quot;result = %u\\n&quot;,result);    return 0;&#125;\n\n字符和字符串\n\n\n#include &lt;stdio.h&gt;int main()&#123;\tchar a = &#x27;C&#x27;;    printf(&quot;%c = %d\\n&quot;,a,a);    return 0;&#125;\n\n\nASCII字符表 7位二进制数来表示所有的大写和小写字符 ，数字0到9，还有一些特殊控制字符。\n\n字符类型是一种特殊的整型 char 变量名【数量】；\n\n\n#include &lt;stdio.h&gt;//字符串的定义和打印int main()&#123;    char a[] = &quot;Hello!&quot;;    char b[5]=&#123;&#x27;M&#x27;,&#x27;u&#x27;,&#x27;y&#x27;,&#x27;e&#x27;,&#x27;\\0&#x27;&#125;;    char c[] = &#123;&quot;Muye&quot;&#125;;    printf(&quot;%s\\n&quot;,a);    printf(&quot;%s\\n&quot;,b);    printf(&quot;%s\\n&quot;,c);    return 0;&#125;\n\n\n算数运算符：\n\n\n\n什么是单目和双目：取决于有多少个操作数 \n例子：1（操作数）+（运算符）2（操作数）\n运算符的优先级和结合性：\n\n#include &lt;stdio.h&gt;int main()&#123;    int i, j,k;    i= 1+2;    j= 1+2*3;    k= i+j+ -1+pow(2,3);        printf(&quot;i=%d\\n&quot;,i);    printf(&quot;j=%d\\n&quot;,j);    printf(&quot;k=%d\\n&quot;,k);        return 0;&#125;\n\n\n类型转换：不同的数据类型相运算的时候 系统默认将数据转换成数据类型较大的一方进行运算 \n例子：1+2.0 &#x3D;&#x3D;  1.0 +2.0\n\n#include &lt;stdio.h&gt;//类型转换int main()&#123;    printf(&quot;整型输出：%d\\n&quot;, 1+(int)2.0);//强制转换为int型    printf(&quot;浮点型输出：%f\\n&quot;,1+2.0);    \treturn 0;&#125;\n\n\n分支结构程序设计\n关系运算符：得到的值为逻辑值 真（1）或者假（0）\n\n\n\n\n\n代码\n&#96;&#96;&#96;\n\n\n\n#include &lt;stdio.h&gt;//关系运算符返回值 1或0int main()&#123;    int a=5,b=3;    printf(&quot;%d\\n&quot;,1&lt;2);    printf(&quot;%d\\n&quot;,a&gt;b);    printf(&quot;%d\\n&quot;,a&lt;=b+1);    printf(&quot;%d\\n&quot;,&#x27;a&#x27;+&#x27;b&#x27;&lt;=&#x27;c&#x27;);    printf(&quot;%d\\n&quot;,(a=3)&gt;(b=5));    return 0;&#125;\n\n\n逻辑运算符：逻辑非 ！      逻辑与&amp;&amp;     逻辑或||\n\n\n#include &lt;stdio.h&gt;//逻辑运算int main()&#123;    int a = 5, b= 3;    printf(&quot;%d\\n&quot;,3&gt;1 &amp;&amp; 1&lt;2);    printf(&quot;%d\\n&quot;,3+1 || 2==0);    printf(&quot;%d\\n&quot;,!(a+b));    printf(&quot;%d\\n&quot;,!0+1&lt;1||!(3+4));    printf(&quot;%d\\n&quot;,&#x27;a&#x27;- &#x27;b&#x27; &amp;&amp; &#x27;c&#x27;);    return 0;&#125;\n\n\n短路求值：逻辑与和逻辑或采用短路求值的方式\n#include &lt;stdio.h&gt;//短路取值int main()&#123;    int a=3,b=3;    (a=0) &amp;&amp; (b=5);    printf(&quot;a=%d,b=%d\\n&quot;,a,b);         (a=1) || (b=5);    printf(&quot;a=%d,b=%d\\n&quot;,a,b);         return 0;&#125;\n\n当逻辑运算符存在时 会优先运算左边的值 如果为真  则不计算右边的值 直接输出\n\nif语句1\n#include &lt;stdio.h&gt;//if 判断语句int main()&#123;    int i;    printf(&quot;今年多大：&quot;);    scanf(&quot;%d&quot;,&amp;i);        if(i&gt;=18)    &#123;        printf(&quot;可以进入网吧！\\n&quot;);    &#125;    else    &#123;        printf(&quot;未成年人不允许进入\\n&quot;);    &#125;    return 0;&#125;\n\nif语句2\n\n\n#include &lt;stdio.h&gt;//if 判断语句2int main()&#123;    int i;    printf(&quot;输入你的成绩：&quot;);\tscanf(&quot;%d&quot;,&amp;i);        if(i&gt;=90)    &#123;        printf(&quot;A\\n&quot;);    &#125;    else if(i&gt;=80 &amp;&amp; i&lt;90)    &#123;        printf(&quot;B\\n&quot;);    &#125;    else if (i&gt;=70 &amp;&amp; i&lt;80)    &#123;        printf(&quot;C\\n&quot;);    &#125;    else if(i&gt;=60 &amp;&amp; i&lt;70)    &#123;        printf(&quot;D\\n&quot;);    &#125;    else    &#123;        printf(&quot;E\\n&quot;);    &#125;        return 0;&#125;\n\n\nswitch 语句与分支嵌套\n\n#include &lt;stdio.h&gt;//SWITCH 语句int main()&#123;    char i;    printf(&quot;请输入成绩：&quot;);    scanf(&quot;%c&quot;,&amp;i);        switch(i)    &#123;        case &#x27;A&#x27;:printf(&quot;你的成绩在90分以上！\\n&quot;);            break;        case &#x27;B&#x27;:printf(&quot;你的成绩在80到90之间！\\n&quot;);            break;        case &#x27;C&#x27;:printf(&quot;你的成绩在70到80之间！\\n&quot;);            break;        case &#x27;D&#x27;:printf(&quot;你的成绩在60到70之间！\\n&quot;);            break;        case &#x27;E&#x27;:printf(&quot;你的成绩在60分以下！！！\\n&quot;);            break;        default: printf(&quot;请输入有效的成绩评级\\n&quot;);               &#125;    return 0;&#125;\n\n\n分支结构的嵌套\n\n#include &lt;stdio.h&gt;//if语句的分支嵌套int main()&#123;    int a,b,i;    printf(&quot;请输入两个数：&quot;);        scanf(&quot;%d %d&quot;,&amp;a,&amp;b);    if(a!=b)    &#123;        if(a&gt;b)        &#123;            i=a-b;            printf(&quot;%d &gt; %d\\n&quot;,a,b);            printf(&quot;%d - %d = %d\\n&quot;,a,b,i);        &#125;        else        &#123;            i=b-a;            printf(&quot;%d &lt; %d\\n&quot;,a,b);             printf(&quot;%d - %d = %d\\n&quot;,b,a,i);        &#125;            &#125;    else    &#123;        printf(&quot;%d = %d\\n&quot;,a,b);    &#125;        return 0;&#125;\n\n\n悬挂else: else始终与最近的if 相匹配  所以要注意大括号的使用\n等号问题：C语言中  “&#x3D;”为赋值号  “&#x3D;&#x3D;”为等号\n\n\n\n\n\n代码\n&#96;&#96;&#96;\n\n\n\nwhiel 和do while循环#include &lt;stdio.h&gt;//从1加到100的和int main()&#123;    int i=1,sum=0;        while(i&lt;=100)    &#123;        sum=sum+i;        i=i+1;    &#125;    printf(&quot;结果是：%d\\n&quot;,sum);    return 0;&#125;\n\n\nwhile 循环\n#include &lt;stdio.h&gt;//用户键盘输入字符的数量统计int main()&#123;    int count=0;    printf(&quot;请输入一串英文字符\\n&quot;);    while(getchar() != &#x27;\\n&#x27;)    &#123;     \tcount=count+1;       &#125;       printf(&quot;你总共输入了%d个字符！\\n&quot;,count);        return 0;&#125;\n\ndo while 循环\n\ndo   循环体\n\n\n  while(表达式);  &#x2F;&#x2F; 注意 这里是有**”;”**\n\n循环的基本结构：1.初始化计数器 2.循环条件 3.更新计数器\n\nfor语句    for(表达式1；表达式2；表达式3)\n循环体\n\n\n#include &lt;stdio.h&gt;//简单的for循环操作int main()&#123;    int count;    for(count=0;count &lt;10 ;count++)    &#123;        printf(&quot;Hello Muye!%d次\\n&quot;,count);    &#125;          \treturn 0;&#125;\n\n\n练习 写一个程序判断一个数是否为素数\n\n#include &lt;stdio.h&gt;//判断一个数是否为素数int main()&#123;    int i, num;    _Bool flag =1;        printf(&quot;请输入一个整数：&quot;);    scanf(&quot;%d&quot;,&amp;num);        for(i=2;i&lt; num/2;i++)    &#123;        if(num % i == 0)        &#123;            flag =0;        &#125;    &#125;    if(flag)    &#123;        printf(&quot;%d是一个素数！\\n&quot;,num);    &#125;    else    &#123;        printf(&quot;%d不是一个素数！\\n&quot;,num);    &#125;    return 0;&#125;\n\n\nfor语句的灵活应用\n\n\n  #include &lt;stdio.h&gt;//for语句的灵活应用int main()&#123;    for(int i=0,j=20;i&lt;j;i++,j--)    &#123;        printf(&quot;第%d个\\n&quot;,i);    &#125;    return 0;&#125;\n\n循环嵌套\n先执行内层循环 再执行外层循环\n#include &lt;stdio.h&gt;//9X9乘法表int main()&#123;    int i,j;    for(i=1;i&lt;=9;i++)    &#123;        for(j=1;j&lt;=i;j++)        &#123;            printf(&quot;%d*%d= %-2d&quot;,i,j,i*j);        &#125;        putchar(&#x27;\\n&#x27;);    &#125;        return 0;&#125;\n\nbreak语句\n\n\n#include &lt;stdio.h&gt;//判断一个数是否为素数 break语句升级版int main()&#123;    long long i, num;    _Bool flag =1;        printf(&quot;请输入一个整数：&quot;);    scanf(&quot;%lld&quot;,&amp;num);        for(i=2;i&lt; num/2;i++)    &#123;        if(num % i == 0)        &#123;            flag =0;            break;        &#125;    &#125;    if(flag)    &#123;        printf(&quot;%lld是一个素数！\\n&quot;,num);    &#125;    else    &#123;        printf(&quot;%lld不是一个素数！\\n&quot;,num);    &#125;    printf(&quot;i=%lld\\n&quot;,i);    return 0;&#125;\n\n\nbreak例子\n#include &lt;stdio.h&gt;//break 只能跳出当前循环int main()&#123;\t    int i,j;    for(i=0;i&lt;10;i++)    &#123;        for(j=0;j&lt;10;j++)        &#123;            if(j == 3)            &#123;                break;            &#125;        &#125;        &#125;    printf(&quot;i=%d, j=%d\\n&quot;,i,j);        return 0;&#125;\n\ncontinue语句\n\n跳过本次循环体中余下尚未执行的语句，立即进行下一次的循环条件判定，可以理解为仅结束本次循环。\n\n\n#include &lt;stdio.h&gt;//用户输入检测 并消除对应的字符int main()&#123;    int ch;    while((ch = getchar()) != &#x27;\\n&#x27;)    &#123;        if (ch == &#x27;C&#x27;)        &#123;            continue;        &#125;        putchar(ch);    &#125;    putchar(&#x27;\\n&#x27;);    return 0;&#125;\n\n\n赋值运算符：左边必须是一个变量 \na&#x3D;a+1 &#x3D;&#x3D; a + &#x3D;1\na&#x3D; a-2 &#x3D;&#x3D; a- &#x3D;1\n自增自减运算符\ni&#x3D;i+1 &#x3D;&#x3D; i++  &#x3D;&#x3D;  ++i\ni&#x3D;i-1 &#x3D;&#x3D; i–  &#x3D;&#x3D; –i\n\n\n\n\n代码\n&#96;&#96;&#96;\n\n\n\n- \n#include &lt;stdio.h&gt;//区别 i++ 和 ++iint main()&#123;    int i =5, j;        j = ++i;    printf(&quot;i = %d, j = %d \\n&quot;,i ,j);        i=5;    j= i++;  \tprintf(&quot;i=%d, j= %d\\n&quot;,i,j);    return 0;&#125;\n\n\n++i的效率更高\nj&#x3D; i++; 相当于先把i赋值给j 然后再加1\n逗号运算符：int i&#x3D;1,j&#x3D;2,k&#x3D;3;\n\n语法：表达式1，表达式2，。。。。。。。表达式N\n\n只要有逗号运算符 表达式都是从左到右计算的\n条件运算符：\n\n\n\ngoto语句\n#include &lt;stdio.h&gt;//goto语句的用法int main()&#123;    int i=5;    while(i++)    &#123;        if(i&gt;10)        &#123;            goto A;        &#125;    &#125;A:\tprintf(&quot;Here, i = %d\\n&quot;,i);        return 0;&#125;\n\n数组\n类型 数组名[元素个数]\n例子： int a[6];     char b[5];       double c[3];\n数组不能被动态定义\n\n\n\n循环和数组的关系\n通常使用循环来访问数组：\n\nint a[10]for(i=0;i&lt;10;i++)&#123;    a[i]= i;&#125;\n\n\n数组的经典应用\n\n#include &lt;stdio.h&gt;//用数组完成统计所有人的成绩 并取平均数#define NUM 10int main()&#123;    int s[NUM];    int i, sum = 0;    for(i=0;i&lt;10;i++)    &#123;        printf(&quot;请输入第%i位同学的成绩：&quot;,i+1);        scanf(&quot;%d&quot;,&amp;s[i]);        sum+= s[i];    &#125;    printf(&quot;成绩录入完毕，这次考试的平均分是：%.2f&quot;,(double)sum/NUM);    return 0;&#125;\n\n\n数组的初始化 可以定义特定的值给数组\n\n例子： int a[]&#x3D;{1,2,3,4,5,6};\n\nint a[10]&#x3D;{[3]&#x3D;5,[6]&#x3D;6,[7]&#x3D;8};\n#include &lt;stdio.h&gt;//给第3，6，7位分别赋值5，6，8 其它值系统默认为0int main()&#123;    int i;    int a[10]=&#123;[3]=5,[6]=6,[7]=8&#125;;    for(i=0;i&lt;10;i++)    &#123;        printf(&quot;%d\\n&quot;,a[i]);    &#125;        return 0;&#125;\n\n字符串处理函数\n\n\n\n\n字符串处理函数#include &lt;stdio.h&gt;#include &lt;string.h&gt;//字符串处理函数头文件//sizeof str取的是数组总长度 多一个&#x27;\\0&#x27;//strlen str 取的是数组长度int main()&#123;    char str[] = &quot;I love Stm32 very much!&quot;;        printf(&quot;sizeof str = %d\\n&quot;,sizeof(str));    \tprintf(&quot;strlen str = %u\\n&quot;,strlen(str));    return 0;&#125;\n\n\n获取字符串的长度：strlen str\n拷贝字符串： strcpy  和  strncpy\n\n#include &lt;stdio.h&gt;#include &lt;string.h&gt;//字符串处理函数头文件int main()&#123;    char str1[] = &quot;Original String&quot;;    char str2[] = &quot;New String&quot;;    char str3[100];        strcpy(str1,str2);    //将2号位覆盖到1号位 注意：被覆盖的长度一定要比原来的长    strcpy(str3,&quot;Copy Successful&quot;);    //将Copy Successful覆盖到数组3中        printf(&quot;str1: %s\\n&quot;,str1);    printf(&quot;str2: %s\\n&quot;,str2);    printf(&quot;str3: %s\\n&quot;,str3);        return 0;&#125;\n\n\nstrncpy函数\n\n#include &lt;stdio.h&gt;#include &lt;string.h&gt;//strncpy函数的使用int main()&#123;    char str1[]= &quot;To be or not to be &quot;;    char str2[40];        strncpy(str2,str1,5);//将str1中的前五个字符覆盖到str2中    //不含有&#x27;\\0&#x27;结束字符    str2[5] = &#x27;\\0&#x27;;        printf(&quot;str2: %s\\n&quot;,str2);        return 0;&#125;\n\n\n连接字符串：strcat和strncat\n\n\n\n\n\n代码\n&#96;&#96;&#96;\n\n\n\n  #include &lt;stdio.h&gt;#include &lt;string.h&gt;// 字符串连接函数使用方法 strcat int main()&#123;    char str1[] = &quot;I love mu&quot;;    char str2[] = &quot;I love yue&quot;;    strcat(str1,&quot; &quot;);// 将空格符连接在str1后面    strcat(str1,str2);//将str2连接在str1后面    printf(&quot;str1: %s\\n&quot;,str1);    return 0;&#125;\n\n\n比较字符串 ：strcmp和strncmp\n使用方法：strcmp(str1,str2)       返回值为0 则两个字符串相等\n\n#include &lt;stdio.h&gt;#include &lt;string.h&gt;//strcmp字符串对比函数使用方法int main()&#123;    char str1[] = &quot; I love Yue&quot;;    char str2[] = &quot; I love Yue&quot;;        if(!strcmp(str1,str2))    &#123;        printf(&quot;str1和str2相等\\n&quot;);    &#125;    else    &#123;        printf(&quot;存在差异\\n&quot;);    &#125;    return 0;&#125;\n\n二维数组\n二维数组的定义\n\n\n\n\n二维数组的访问\n\n数组名【下标】【下标】 防止数组越界\n#include &lt;stdio.h&gt;//二维数组的使用方法int main()&#123;    int a[3][4] = &#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;;    //int a[3][4] = &#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;;    int i,j;        for(i=0;i&lt;3;i++)    &#123;        for(j=0;j&lt;4;j++)        &#123;            printf(&quot;%d &quot;,a[i][j]);        &#125;        printf(&quot;\\n&quot;);    &#125;    return 0;&#125;\n\n指针\n指针和指针变量  存放地址的变量\n定义方法： 类型名 *指针变量名      \nchar *pa;   &#x2F;&#x2F;定义一个指向字符型的指针变量\nint *pb;    &#x2F;&#x2F;定义一个指向整型的指针变量\n\n\n\n指针的基本用法\n#include &lt;stdio.h&gt;//指针的基本用法int main()&#123;    char a =&#x27;F&#x27;;    int f = 123;        char *pa = &amp;a;    //  类型是char* pa;    // \tpa = &amp;a;    int *pb = &amp;f;    \tprintf(&quot;%c\\n&quot;,*pa); //    printf(&quot;%d\\n&quot;,*pb);        *pa = &#x27;C&#x27;;    *pb += 1;        printf(&quot;now,a= %c\\n&quot;,*pa); //      printf(&quot;now,f= %d\\n&quot;,*pb);        printf(&quot;sizeof pa = %d\\n&quot;,sizeof(pa));//查看有多少个字节    printf(&quot;sizeof pb = %d\\n&quot;,sizeof(pb));        printf(&quot;the addr of a is : %p\\n&quot;,pa);//查看地址    printf(&quot;the addr of b is : %p\\n&quot;,pb);        return 0;&#125;\n\n避免访问未初始化的指针\n\n\n指针和数组#include &lt;stdio.h&gt;//指针代表的含义int main()&#123;    int a;    int *p = &amp;a;    printf(&quot;请输入一个数：&quot;);    scanf(&quot;%d&quot;,&amp;a);    printf(&quot;a = %d\\n&quot;,a);    printf(&quot;请再输入一个整数：&quot;);    scanf(&quot;%d&quot;,p);//p就代表a的地址  *p代表a的值    printf(&quot;a = %d\\n&quot;,a);    return 0;&#125;\n\n\n数组名的关系\n\n数组名其实是数组第一个元素的地址\n#include &lt;stdio.h&gt;//数组名是第一个元素的地址int main()&#123;    char str[128];        printf(&quot;请输入英文姓名：&quot;);    scanf(&quot;%s&quot;,str);        //printf(&quot;你的英文姓名是：%s\\n&quot;,str);    printf(&quot;str 的地址是：%p\\n&quot;,str);//%p是打印地址的    printf(&quot;str 的地址是：%p\\n&quot;,&amp;str[0]);        return 0;&#125;\n\n数组的地址\n\n\n#include &lt;stdio.h&gt;//数组在存储中是按顺序放置的int main()&#123;    char a[] = &quot;FishC&quot;;    int b[5] = &#123;1,2,3,4,5&#125;;    float c[5] = &#123;1.1,2.2,3.3,4.4,5.5&#125;;    double d[5] = &#123;1.1,2.2,3.3,4.4,5.5&#125;;        printf(&quot;a[0] -&gt;%p,a[1] -&gt;%p,a[2] -&gt;%p\\n&quot;,&amp;a[0],&amp;a[1],a[2]);    printf(&quot;b[0] -&gt;%p,b[1] -&gt;%p,b[2] -&gt;%p\\n&quot;,&amp;b[0],&amp;b[1],b[2]);    printf(&quot;c[0] -&gt;%p,c[1] -&gt;%p,c[2] -&gt;%p\\n&quot;,&amp;c[0],&amp;c[1],c[2]);    printf(&quot;d[0] -&gt;%p,d[1] -&gt;%p,d[2] -&gt;%p\\n&quot;,&amp;d[0],&amp;d[1],d[2]);        return 0;&#125;\n\n\n指向数组的指针\n\n*p表示变量的值  *(p+1)表示下一个变量的值\n\n\n#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;    char *str = &quot;I love FishC.com!&quot;;    int i,length;    length = strlen(str);//strlen函数是获取字符的个数    for(i = 0;i &lt; length;i++)    &#123;        printf(&quot;%c&quot;,str[i]);    &#125;    printf(&quot;\\n&quot;);    return 0;&#125;\n\n\n指针数组和数组指针\n指针和数组的区别\n\n#include &lt;stdio.h&gt;//数组名和指针的区别int main()&#123;    char str[]= &quot;I love FishC.com!&quot;;    char *target = str;    int count = 0;    while(*target++ != &#x27;\\0&#x27;)    &#123;        count++;    &#125;    printf(&quot;总共有%d个字符！&quot;,count);    return 0;&#125;\n\n\n结论：数组名知识一个地址，而指针是一个左值\n\n指针数组：int *p1[5];\n\n\n指针数组是一个数组，每一个数组元素存放一个指针变量\n#include &lt;stdio.h&gt;//指针数组int main()&#123;    int  a = 1;    int  b = 2;    int  c = 3;    int  d = 4;    int  e = 5;   \tint *pl[5] = &#123;&amp;a , &amp;b, &amp;c, &amp;d, &amp;e&#125;;    int i;    for(i=0;i&lt; 5;i++)    &#123;        printf(&quot;%d\\n&quot;,*pl[i]);    &#125;    return 0;&#125;\n\n指针数组的用法\n\n\n#include &lt;stdio.h&gt;//指针数组是数组int main()&#123;    char *pl[5] =&#123;        &quot;让编程更有趣&quot;,            &quot;just do it!&quot;,        &quot;一切皆有可能！&quot;,        &quot;永不止步！&quot;,        &quot;一点点 又是一点点！&quot;    &#125;;    int i;    for(i=0; i&lt; 5;i++)    &#123;        printf(&quot;%s\\n&quot;,pl[i]);    &#125;    return 0;&#125;\n\n数组指针int (*p2)[5];\n\n\n结论：数组指针是一个指针，它指向的是一个数组\n\n\n\n\n代码\n&#96;&#96;&#96;\n\n\n\n#include &lt;stdio.h&gt;//数组指针是指针int main()&#123;    int temp[5] = &#123;1,2,3,4,5&#125;;    int (*p2)[5] = &amp;temp;    int i;    for(i=0;i&lt; 5; i++)    &#123;        printf(&quot;%d\\n&quot;,*(*p2+i));//*p2是地址 *(*p2)就是元素值了    &#125;    return 0;&#125;\n\n\n指针和数组的扩展\n\n#include &lt;stdio.h&gt;//array数组的数组名其实站了四个位置int main()&#123;    int array[4][5] = &#123;0&#125;;    printf(&quot;sizeof int :%d\\n&quot;,sizeof(int));    printf(&quot;array : %p\\n&quot;,array);    printf(&quot;array + 1 : %p\\n&quot;,array + 1);    return 0;&#125;\n\n\n解引用    *(array +1)\n\n*(array +1)  &#x3D;&#x3D; array[1]\n\n*(array+1)+3   &#x3D;&#x3D;   &amp;array[1] [3]\n\n数组指针和二维数组\n\n定义一个数组指针：int (*p)[3] ;     \n\nint (*p)[3]   &#x3D;   arrary;       \n\n结论：*(arrary+i) &#x3D;&#x3D; array[i]\n\n\nvoid指针\nvoid是无类型\nvoid指针为通用指针，就是可以指向任意类型的数据。\n\n#include &lt;stdio.h&gt;//void指针的应用int main()&#123;    int num = 1024;    int *pi = &amp;num;    char *ps = &quot;FishC&quot;;    void *pv;//定义一个无类型的指针    pv = pi;    printf(&quot;pi:%p , pv:%p\\n&quot;,pi,pv);    printf(&quot;*pv:%d\\n&quot;,*(int*)pv);    pv = ps;    printf(&quot;ps:%p , pv:%p\\n&quot;,ps,pv);    printf(&quot;*pv: %s\\n&quot;,(char*)pv);    return 0;&#125;\n\n\nNULL 指针(空指针)\n#define NULL ((void *)0)\n\n#include &lt;stdio.h&gt;//定义一个指针时可以默认空指针int main()&#123;    int *p1;    int *p2 = NULL;     \tprintf(&quot;%d\\n&quot;,*p1);       printf(&quot;%d\\n&quot;,*p2);        return 0;&#125;\n\n\n不知道指针初始化什么地址的时候，将指针初始化为NULL\n在对指针解引用时，先要检查指针是否为NULL\n\n指向指针的指针- \n#include &lt;stdio.h&gt;//相当于无限嵌套 指针int main()&#123;    int num = 520;    int *p = &amp;num;    int **pp = &amp;p;        printf(&quot;num: %d\\n&quot;,num);    printf(&quot;*p: %d\\n&quot;,*p);    printf(&quot;**pp :%d\\n&quot;,**pp);        printf(&quot;&amp;p:%p,pp:%p\\n&quot;,&amp;p,pp);    printf(&quot;&amp;num: %p, p: %p, *pp:%p\\n&quot;,&amp;num,p,*pp);        return 0;&#125;\n\n指针数组和指向指针的指针\n地址 &#x3D;&#x3D; 地址\n值 &#x3D;&#x3D; 值\n#include &lt;stdio.h&gt;//指向指针的指针的应用int main()&#123;    int i;    char *Book[] =    &#123;        &quot;《平凡的世界》&quot;,        &quot;《追风筝的人》&quot;,        &quot;《三体》&quot;,        &quot;《房思琪的初恋乐园》&quot;,        &quot;《活着》&quot;    &#125;;    char **Scif;    char **muyeloves[4];        Scif = &amp;Book[2];    muyeloves[0] = &amp;Book[0];    muyeloves[1] = &amp;Book[1];    muyeloves[2] = &amp;Book[3];    muyeloves[3] = &amp;Book[4];        printf(&quot;muye喜欢的科幻小说：%s\\n&quot;,*Scif);    printf(&quot;muye喜欢的小说：\\n&quot;);        for(i = 0;i&lt; 4;i++)    &#123;        printf(&quot;%s\\n&quot;,*muyeloves[i]);            &#125;    return 0;&#125;\n\n数组指针和二维数组\n  #include &lt;stdio.h&gt;//int main()&#123;    int i;    int arrary1[10] = &#123;0,1,2,3,4,5,6,7,8,9&#125;;    int *p = arrary1;        for(i = 0;i&lt;10;i++)    &#123;        printf(&quot;%d\\n&quot;,*(p+i));    &#125;        return 0;&#125;\n\n常量和指针\n\n将变量变成常量 使用const函数\n\n#include &lt;stdio.h&gt;// int main()&#123;    const float pi = 3.14;        printf(&quot;%f\\n&quot;,pi);           return 0;&#125;\n\n","categories":["学习C语言"],"tags":["学习"]},{"title":"Hello World","url":"/2022/07/13/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":[],"tags":[]}]